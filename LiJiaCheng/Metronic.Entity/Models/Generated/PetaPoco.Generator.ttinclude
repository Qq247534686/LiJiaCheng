<#@include file="MultipleOutputHelper.ttinclude"#> 
<#var manager = Manager.Create(Host, GenerationEnvironment);#>
<#
if (string.IsNullOrEmpty(Namespace)) Namespace=ConnectionStringName;
if (string.IsNullOrEmpty(RepoName) && !string.IsNullOrEmpty(ConnectionStringName)) RepoName=ConnectionStringName + "DB";
if (string.IsNullOrEmpty(Namespace)) Namespace="PetaPoco";
if (string.IsNullOrEmpty(RepoName)) RepoName="PetaPocoDB";
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace <#=Namespace #>
{
<# if (GenerateCommon) { #>
	public partial class <#=RepoName#> : Database
	{
		public <#=RepoName#>() 
			: base("<#=ConnectionStringName#>")
		{
			CommonConstruct();
		}

		public <#=RepoName#>(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			<#=RepoName#> GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static <#=RepoName#> GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new <#=RepoName#>();
        }

		[ThreadStatic] static <#=RepoName#> _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
    }   
<# if (GenerateOperations) { #>
	public class Record<T> where T:new()
	{
		public static <#=RepoName#> db { get { return <#=RepoName#>.GetInstance(); } }
		public bool IsNew() { return db.IsNew(this); }
		public object Insert() { return db.Insert(this); }
<# if (!TrackModifiedColumns) { #>
		public void Save() { db.Save(this); }
		public int Update() { return db.Update(this); }
<# } #>
		public int Update(IEnumerable<string> columns) { return db.Update(this, columns); }
		public static int Update(string sql, params object[] args) { return db.Update<T>(sql, args); }
		public static int Update(Sql sql) { return db.Update<T>(sql); }
		public int Delete() { return db.Delete(this); }
		public static int Delete(string sql, params object[] args) { return db.Delete<T>(sql, args); }
		public static int Delete(Sql sql) { return db.Delete<T>(sql); }
		public static int Delete(object primaryKey) { return db.Delete<T>(primaryKey); }
		public static bool Exists(object primaryKey) { return db.Exists<T>(primaryKey); }
		public static bool Exists(string sql, params object[] args) { return db.Exists<T>(sql, args); }
		public static T SingleOrDefault(object primaryKey) { return db.SingleOrDefault<T>(primaryKey); }
		public static T SingleOrDefault(string sql, params object[] args) { return db.SingleOrDefault<T>(sql, args); }
		public static T SingleOrDefault(Sql sql) { return db.SingleOrDefault<T>(sql); }
		public static T FirstOrDefault(string sql, params object[] args) { return db.FirstOrDefault<T>(sql, args); }
		public static T FirstOrDefault(Sql sql) { return db.FirstOrDefault<T>(sql); }
		public static T Single(object primaryKey) { return db.Single<T>(primaryKey); }
		public static T Single(string sql, params object[] args) { return db.Single<T>(sql, args); }
		public static T Single(Sql sql) { return db.Single<T>(sql); }
		public static T First(string sql, params object[] args) { return db.First<T>(sql, args); }
		public static T First(Sql sql) { return db.First<T>(sql); }
		public static List<T> Fetch(string sql, params object[] args) { return db.Fetch<T>(sql, args); }
		public static List<T> Fetch(Sql sql) { return db.Fetch<T>(sql); }
		public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return db.Fetch<T>(page, itemsPerPage, sql, args); }
		public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return db.Fetch<T>(page, itemsPerPage, sql); }
		public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return db.SkipTake<T>(skip, take, sql, args); }
		public static List<T> SkipTake(long skip, long take, Sql sql) { return db.SkipTake<T>(skip, take, sql); }
		public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return db.Page<T>(page, itemsPerPage, sql, args); }
		public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return db.Page<T>(page, itemsPerPage, sql); }
		public static IEnumerable<T> Query(string sql, params object[] args) { return db.Query<T>(sql, args); }
		public static IEnumerable<T> Query(Sql sql) { return db.Query<T>(sql); }
<# if (TrackModifiedColumns) { #>			
		private Dictionary<string,bool> ModifiedColumns;
		private void OnLoaded()
		{
			ModifiedColumns = new Dictionary<string,bool>();
		}
		protected void MarkColumnModified(string column_name)
		{
			if (ModifiedColumns!=null)
				ModifiedColumns[column_name]=true;
		}
		public int Update() 
		{ 
			if (ModifiedColumns==null)
				return db.Update(this); 

			int retv = db.Update(this, ModifiedColumns.Keys);
			ModifiedColumns.Clear();
			return retv;
		}
		public void Save() 
		{ 
			if (db.IsNew(this))
				db.Insert(this);
			else
				Update();
		}
<# } #>
		
<# } #>
	}
<# } #>	
}
<# if (GeneratePocos) { #>
<#
foreach(Table tbl in from t in tables where !t.Ignore select t)
{
#>
<#manager.StartNewFile((ClassPrefix+tbl.Name+ClassSuffix)+".cs"); #>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;
namespace <#=Namespace #>
{
    /// <summary>
    /// <#=string.IsNullOrEmpty(tbl.Remark)?"":tbl.Remark#>
    /// </summary>
<# if (string.IsNullOrEmpty(tbl.Schema)) { #>    [TableName("<#=tbl.Name#>")]<# } else { #>    [TableName("<#=tbl.Schema + "." + tbl.Name#>")]<# } #>
<# if (tbl.PK!=null && tbl.PK.IsAutoIncrement) { #><# if (tbl.SequenceName==null) { #>    [PrimaryKey("<#=tbl.PK.Name#>")]<# } else { #>    [PrimaryKey("<#=tbl.PK.Name#>", sequenceName="<#=tbl.SequenceName#>")]<# } #><# } #><# if (tbl.PK!=null && !tbl.PK.IsAutoIncrement) { #>    [PrimaryKey("<#=tbl.PK.Name#>", AutoIncrement = false)]<# } #>
<# if (ExplicitColumns) { #>    [ExplicitColumns]<# } #>
    public partial class <#=tbl.ClassName#> <# if (GenerateOperations) { #>//:Record<<#=tbl.ClassName#>> <# } #> 
    {<#foreach(Column col in from c in tbl.Columns where !c.Ignore select c){#>
        /// <summary>
        /// <#=string.IsNullOrEmpty(col.Remark)?"":col.Remark#>
        /// </summary>
<# if (TrackModifiedColumns) { #><# if (col.Name!=col.PropertyName) { #>        [Column("<#=col.Name#>")] <# } else { #><# if (ExplicitColumns) { #>        [Column] <# } #><# } #>
		public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get{return _<#=col.PropertyName #>;}set{_<#=col.PropertyName #> = value;MarkColumnModified("<#=col.Name#>");}}
		<#=col.PropertyType #><#=CheckNullable(col)#> _<#=col.PropertyName #>;<# } else { #><# if (col.Name!=col.PropertyName) { #>        [Column("<#=col.Name#>")] 
        public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }<# } else { #><# if (ExplicitColumns) { #>        [Column] <# } #>
        public <#=col.PropertyType #><#=CheckNullable(col)#> <#=col.PropertyName #> { get; set; }
<# } #>
<# } #>
<# } #>
	}
}
<#manager.EndBlock();#>

<# } #>
<# } #>
<#manager.Process(true);#>